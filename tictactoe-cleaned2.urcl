BITS 8
MINHEAP 0
MINSTACK 4
MINREG 8
CAL .URSL_func_main
HLT
.URSL_data_top__of__board
DW [ 32 32 32 32 49 32 32 32 50 32 32 32 51 10 32 32 43 45 45 45 43 45 45 45 43 45 45 45 43 0 ]
.URSL_data_one__row
DW [ 63 32 124 32 63 32 124 32 63 32 124 32 63 32 124 10 32 32 43 45 45 45 43 45 45 45 43 45 45 45 43 0 ]
.URSL_data_state
DW [ 32 32 32 32 32 32 32 32 32 ]
.URSL_data_winner
DW [ 63 32 119 105 110 115 33 0 ]
.URSL_data_draw
DW [ 73 116 39 115 32 97 32 100 114 97 119 33 0 ]
.URSL_data_bad__input
DW [ 66 97 100 32 105 110 112 117 116 32 40 104 97 108 116 105 110 103 41 0 ]
.URSL_data_occupied__square
DW [ 84 104 97 116 32 99 101 108 108 32 105 115 32 111 99 99 117 112 105 101 100 0 ]
.URSL_data_computer__no__move
DW [ 108 111 108 32 117 32 119 105 110 32 39 99 97 117 115 101 32 116 104 101 10 99 111 109 112 117 116 101 114 32 102 117 99 107 105 110 103 32 100 105 101 100 0 ]
.URSL_data_out__of__bounds
DW [ 83 101 108 101 99 116 105 111 110 32 111 117 116 32 111 102 32 98 111 117 110 100 115 0 ]
.URSL_data_last__user__move
DW 0
.URSL_data_triples
DW [ 0 1 2 3 4 5 6 7 8 0 3 6 1 4 7 2 5 8 0 4 8 2 4 6 ]
.URSL_data_selected__ai
DW 0
.URSL_data_available__ai
DW [ .URSL_func_random__ai 82 78 71 0 .URSL_func_smartish__ai 83 109 97 114 116 105 115 104 0 0 ]

.URSL_func_do__triple

// stack:
// +0; 0 -> 1
// const 0

// stack: 0
// +1; 1 -> 1
// label :smartish_loop
// prev alloc: 0
IMM $1 0
// new alloc: $1
.URSL_func_do__triple_label_smartish__loop

// stack: $1
// +0; 1 -> 2
// call dup

// stack: $1 $1
// +2; 2 -> 3
// const 24

// stack: $1 $1 24
// +1; 3 -> 1
// gte branch :no_triple
// prev alloc: $1 $1 24
// new alloc: $1 $1 24
BGE .URSL_func_do__triple_label_no__triple $1 24

// stack: $1
// +1; 1 -> 2
// const .URSL_data_triples

// stack: $1 .URSL_data_triples
// +0; 2 -> 3
// call over

// stack: $1 .URSL_data_triples $1
// +1; 3 -> 2
// call add.load
LLOD $2 .URSL_data_triples $1

// stack: $1 $2
// +2; 2 -> 3
// const .URSL_data_state

// stack: $1 $2 .URSL_data_state
// +1; 3 -> 3
// call swap

// stack: $1 .URSL_data_state $2
// +1; 3 -> 2
// call add.load
LLOD $2 .URSL_data_state $2

// stack: $1 $2
// +0; 2 -> 3
// call over

// stack: $1 $2 $1
// +3; 3 -> 4
// const .URSL_data_triples

// stack: $1 $2 $1 .URSL_data_triples
// +2; 4 -> 5
// call over

// stack: $1 $2 $1 .URSL_data_triples $1
// +5; 5 -> 6
// const 1

// stack: $1 $2 $1 .URSL_data_triples $1 1
// +4; 6 -> 5
// call add
ADD $3 $1 1

// stack: $1 $2 $1 .URSL_data_triples $3
// +3; 5 -> 4
// call add.load
LLOD $3 .URSL_data_triples $3

// stack: $1 $2 $1 $3
// +4; 4 -> 5
// const .URSL_data_state

// stack: $1 $2 $1 $3 .URSL_data_state
// +3; 5 -> 5
// call swap

// stack: $1 $2 $1 .URSL_data_state $3
// +3; 5 -> 4
// call add.load
LLOD $3 .URSL_data_state $3

// stack: $1 $2 $1 $3
// +2; 4 -> 4
// call swap

// stack: $1 $2 $3 $1
// +4; 4 -> 5
// const .URSL_data_triples

// stack: $1 $2 $3 $1 .URSL_data_triples
// +3; 5 -> 5
// call swap

// stack: $1 $2 $3 .URSL_data_triples $1
// +5; 5 -> 6
// const 2

// stack: $1 $2 $3 .URSL_data_triples $1 2
// +4; 6 -> 5
// call add
ADD $4 $1 2

// stack: $1 $2 $3 .URSL_data_triples $4
// +3; 5 -> 4
// call add.load
LLOD $4 .URSL_data_triples $4

// stack: $1 $2 $3 $4
// +4; 4 -> 5
// const .URSL_data_state

// stack: $1 $2 $3 $4 .URSL_data_state
// +3; 5 -> 5
// call swap

// stack: $1 $2 $3 .URSL_data_state $4
// +3; 5 -> 4
// call add.load
LLOD $4 .URSL_data_state $4

// stack: $1 $2 $3 $4
// +1; 4 -> 7
// perm [ 1 2 3 ] -> [ 1 2 3 2 3 1 ]

// stack: $1 $2 $3 $4 $3 $4 $2
// +7; 7 -> 8
// const 32

// stack: $1 $2 $3 $4 $3 $4 $2 32
// +6; 8 -> 6
// ne branch :check1h
// prev alloc: $1 $2 $3 $4 $3 $4 $2 32
MOV $5 $3
MOV $6 $4
// new alloc: $1 $2 $3 $4 $5 $6 $2 32
BNE .URSL_func_do__triple_label_check1h $2 32

// stack: $1 $2 $3 $4 $5 $6
// +6; 6 -> 7
// get 0
LLOD $7 SP 1

// stack: $1 $2 $3 $4 $5 $6 $7
// +5; 7 -> 7
// call swap

// stack: $1 $2 $3 $4 $5 $7 $6
// +5; 7 -> 8
// call over

// stack: $1 $2 $3 $4 $5 $7 $6 $7
// +6; 8 -> 6
// ne branch :check1h
// prev alloc: $1 $2 $3 $4 $5 $7 $6 $6
MOV $8 $6
MOV $6 $7
MOV $7 $8
// new alloc: $1 $2 $3 $4 $5 $6 $7 $6
BNE .URSL_func_do__triple_label_check1h $7 $6

// stack: $1 $2 $3 $4 $5 $6
// +4; 6 -> 4
// ne branch :check1
BNE .URSL_func_do__triple_label_check1 $5 $6

// stack: $1 $2 $3 $4
// +3; 4 -> 3
// call pop

// stack: $1 $2 $3
// +2; 3 -> 2
// call pop

// stack: $1 $2
// +1; 2 -> 1
// call pop

// stack: $1
// +1; 1 -> ?
// jump :make_move
// prev alloc: $1
// new alloc: $1
JMP .URSL_func_do__triple_label_make__move

// stack: $1
// +0; 6 -> 6
// height 6

// stack: $1 $2 $3 $4 $5 $6
// +6; 6 -> 6
// label :check1h
// prev alloc: $1 $2 $3 $4 $5 $6
// new alloc: $1 $2 $3 $4 $5 $6
.URSL_func_do__triple_label_check1h

// stack: $1 $2 $3 $4 $5 $6
// +5; 6 -> 5
// call pop

// stack: $1 $2 $3 $4 $5
// +4; 5 -> 4
// call pop

// stack: $1 $2 $3 $4
// +4; 4 -> 4
// label :check1
// prev alloc: $1 $2 $3 $4
// new alloc: $1 $2 $3 $4
.URSL_func_do__triple_label_check1

// stack: $1 $2 $3 $4
// +1; 4 -> 7
// perm [ 1 2 3 ] -> [ 1 2 3 1 3 2 ]

// stack: $1 $2 $3 $4 $2 $4 $3
// +7; 7 -> 8
// const 32

// stack: $1 $2 $3 $4 $2 $4 $3 32
// +6; 8 -> 6
// ne branch :check2h
// prev alloc: $1 $2 $3 $4 $2 $4 $3 32
MOV $5 $2
MOV $6 $4
// new alloc: $1 $2 $3 $4 $5 $6 $3 32
BNE .URSL_func_do__triple_label_check2h $3 32

// stack: $1 $2 $3 $4 $5 $6
// +6; 6 -> 7
// get 0
LLOD $7 SP 1

// stack: $1 $2 $3 $4 $5 $6 $7
// +5; 7 -> 7
// call swap

// stack: $1 $2 $3 $4 $5 $7 $6
// +5; 7 -> 8
// call over

// stack: $1 $2 $3 $4 $5 $7 $6 $7
// +6; 8 -> 6
// ne branch :check2h
// prev alloc: $1 $2 $3 $4 $5 $7 $6 $6
MOV $8 $6
MOV $6 $7
MOV $7 $8
// new alloc: $1 $2 $3 $4 $5 $6 $7 $6
BNE .URSL_func_do__triple_label_check2h $7 $6

// stack: $1 $2 $3 $4 $5 $6
// +4; 6 -> 4
// ne branch :check2
BNE .URSL_func_do__triple_label_check2 $5 $6

// stack: $1 $2 $3 $4
// +3; 4 -> 3
// call pop

// stack: $1 $2 $3
// +2; 3 -> 2
// call pop

// stack: $1 $2
// +1; 2 -> 1
// call pop

// stack: $1
// +1; 1 -> 2
// const 1

// stack: $1 1
// +0; 2 -> 1
// call add
ADD $2 $1 1

// stack: $2
// +1; 1 -> ?
// jump :make_move
// prev alloc: $2
MOV $1 $2
// new alloc: $1
JMP .URSL_func_do__triple_label_make__move

// stack: $1
// +0; 6 -> 6
// height 6

// stack: $1 $2 $3 $4 $5 $6
// +6; 6 -> 6
// label :check2h
// prev alloc: $1 $2 $3 $4 $5 $6
// new alloc: $1 $2 $3 $4 $5 $6
.URSL_func_do__triple_label_check2h

// stack: $1 $2 $3 $4 $5 $6
// +5; 6 -> 5
// call pop

// stack: $1 $2 $3 $4 $5
// +4; 5 -> 4
// call pop

// stack: $1 $2 $3 $4
// +4; 4 -> 4
// label :check2
// prev alloc: $1 $2 $3 $4
// new alloc: $1 $2 $3 $4
.URSL_func_do__triple_label_check2

// stack: $1 $2 $3 $4
// +1; 4 -> 7
// perm [ 1 2 3 ] -> [ 1 2 3 1 2 3 ]

// stack: $1 $2 $3 $4 $2 $3 $4
// +7; 7 -> 8
// const 32

// stack: $1 $2 $3 $4 $2 $3 $4 32
// +6; 8 -> 6
// ne branch :check_endh
// prev alloc: $1 $2 $3 $4 $2 $3 $4 32
MOV $5 $2
MOV $6 $3
// new alloc: $1 $2 $3 $4 $5 $6 $4 32
BNE .URSL_func_do__triple_label_check__endh $4 32

// stack: $1 $2 $3 $4 $5 $6
// +6; 6 -> 7
// get 0
LLOD $7 SP 1

// stack: $1 $2 $3 $4 $5 $6 $7
// +5; 7 -> 7
// call swap

// stack: $1 $2 $3 $4 $5 $7 $6
// +5; 7 -> 8
// call over

// stack: $1 $2 $3 $4 $5 $7 $6 $7
// +6; 8 -> 6
// ne branch :check_endh
// prev alloc: $1 $2 $3 $4 $5 $7 $6 $6
MOV $8 $6
MOV $6 $7
MOV $7 $8
// new alloc: $1 $2 $3 $4 $5 $6 $7 $6
BNE .URSL_func_do__triple_label_check__endh $7 $6

// stack: $1 $2 $3 $4 $5 $6
// +4; 6 -> 4
// ne branch :check_end
BNE .URSL_func_do__triple_label_check__end $5 $6

// stack: $1 $2 $3 $4
// +3; 4 -> 3
// call pop

// stack: $1 $2 $3
// +2; 3 -> 2
// call pop

// stack: $1 $2
// +1; 2 -> 1
// call pop

// stack: $1
// +1; 1 -> 2
// const 2

// stack: $1 2
// +0; 2 -> 1
// call add
ADD $2 $1 2

// stack: $2
// +1; 1 -> ?
// jump :make_move
// prev alloc: $2
MOV $1 $2
// new alloc: $1
JMP .URSL_func_do__triple_label_make__move

// stack: $1
// +0; 6 -> 6
// height 6

// stack: $1 $2 $3 $4 $5 $6
// +6; 6 -> 6
// label :check_endh
// prev alloc: $1 $2 $3 $4 $5 $6
// new alloc: $1 $2 $3 $4 $5 $6
.URSL_func_do__triple_label_check__endh

// stack: $1 $2 $3 $4 $5 $6
// +5; 6 -> 5
// call pop

// stack: $1 $2 $3 $4 $5
// +4; 5 -> 4
// call pop

// stack: $1 $2 $3 $4
// +4; 4 -> 4
// label :check_end
// prev alloc: $1 $2 $3 $4
// new alloc: $1 $2 $3 $4
.URSL_func_do__triple_label_check__end

// stack: $1 $2 $3 $4
// +3; 4 -> 3
// call pop

// stack: $1 $2 $3
// +2; 3 -> 2
// call pop

// stack: $1 $2
// +1; 2 -> 1
// call pop

// stack: $1
// +1; 1 -> 2
// const 3

// stack: $1 3
// +0; 2 -> 1
// call add
ADD $2 $1 3

// stack: $2
// +1; 1 -> ?
// jump :smartish_loop
// prev alloc: $2
MOV $1 $2
// new alloc: $1
JMP .URSL_func_do__triple_label_smartish__loop

// stack: $1
// +0; 1 -> 1
// height 1

// stack: $1
// +1; 1 -> 1
// label :make_move
// prev alloc: $1
// new alloc: $1
.URSL_func_do__triple_label_make__move

// stack: $1
// +1; 1 -> 2
// const .URSL_data_triples

// stack: $1 .URSL_data_triples
// +0; 2 -> 2
// call swap

// stack: .URSL_data_triples $1
// +0; 2 -> 1
// call add.load
LLOD $2 .URSL_data_triples $1

// stack: $2
// +1; 1 -> 2
// const .URSL_data_state

// stack: $2 .URSL_data_state
// +0; 2 -> 2
// call swap

// stack: .URSL_data_state $2
// +2; 2 -> 3
// const 79

// stack: .URSL_data_state $2 79
// +0; 3 -> 0
// call add.store
LSTR .URSL_data_state $2 79

// stack:
// +0; 0 -> 1
// const @MAX

// stack: @MAX
// +0; 1 -> ?
// ret
// prev alloc: @MAX
IMM $1 @MAX
// new alloc: $1
RET

// stack: $1
// +0; 1 -> 1
// height 1

// stack: $1
// +1; 1 -> 1
// label :no_triple
// prev alloc: $1
// new alloc: $1
.URSL_func_do__triple_label_no__triple

// stack: $1
// +0; 1 -> 0
// call pop

// stack:
// +0; 0 -> 1
// const 0

// stack: 0
// +0; 1 -> ?
// ret
// prev alloc: 0
IMM $1 0
// new alloc: $1
RET

.URSL_func_input

// stack:
// +0; 0 -> 1
// in %TEXT
IN $1 %TEXT

// stack: $1
// +0; 1 -> 2
// call dup

// stack: $1 $1
// +2; 2 -> 3
// const 65

// stack: $1 $1 65
// +1; 3 -> 4
// call over

// stack: $1 $1 65 $1
// +4; 4 -> 5
// const 67

// stack: $1 $1 65 $1 67
// +3; 5 -> 3
// gt branch :bad3
// prev alloc: $1 $1 65 $1 67
MOV $2 $1
IMM $3 65
// new alloc: $1 $2 $3 $1 67
BRG .URSL_func_input_label_bad3 $1 67

// stack: $1 $2 $3
// +1; 3 -> 1
// lt branch :bad1
BRL .URSL_func_input_label_bad1 $2 $3

// stack: $1
// +1; 1 -> 2
// const 65

// stack: $1 65
// +0; 2 -> 1
// call sub
SUB $2 $1 65

// stack: $2
// +1; 1 -> 2
// const 3

// stack: $2 3
// +0; 2 -> 1
// call mult
MLT $1 $2 3

// stack: $1
// +1; 1 -> 2
// in %TEXT
IN $2 %TEXT

// stack: $1 $2
// +1; 2 -> 3
// call dup

// stack: $1 $2 $2
// +3; 3 -> 4
// const 49

// stack: $1 $2 $2 49
// +2; 4 -> 5
// call over

// stack: $1 $2 $2 49 $2
// +5; 5 -> 6
// const 51

// stack: $1 $2 $2 49 $2 51
// +4; 6 -> 4
// gt branch :bad4
// prev alloc: $1 $2 $2 49 $2 51
MOV $3 $2
IMM $4 49
// new alloc: $1 $2 $3 $4 $2 51
BRG .URSL_func_input_label_bad4 $2 51

// stack: $1 $2 $3 $4
// +2; 4 -> 2
// lt branch :bad2
BRL .URSL_func_input_label_bad2 $3 $4

// stack: $1 $2
// +2; 2 -> 3
// const 49

// stack: $1 $2 49
// +1; 3 -> 2
// call sub
SUB $3 $2 49

// stack: $1 $3
// +0; 2 -> 1
// call add
ADD $2 $1 $3

// stack: $2
// +1; 1 -> 2
// in %TEXT
IN $1 %TEXT

// stack: $2 $1
// +2; 2 -> 3
// const 10

// stack: $2 $1 10
// +1; 3 -> 1
// ne branch :bad1
// prev alloc: $2 $1 10
MOV $3 $1
MOV $1 $2
MOV $2 $3
// new alloc: $1 $2 10
BNE .URSL_func_input_label_bad1 $2 10

// stack: $1
// +0; 1 -> ?
// ret
// prev alloc: $1
// new alloc: $1
RET

// stack: $1
// +0; 4 -> 4
// height 4

// stack: $1 $2 $3 $4
// +4; 4 -> 4
// label :bad4
// prev alloc: $1 $2 $3 $4
// new alloc: $1 $2 $3 $4
.URSL_func_input_label_bad4

// stack: $1 $2 $3 $4
// +3; 4 -> 3
// call pop

// stack: $1 $2 $3
// +3; 3 -> 3
// label :bad3
// prev alloc: $1 $2 $3
// new alloc: $1 $2 $3
.URSL_func_input_label_bad3

// stack: $1 $2 $3
// +2; 3 -> 2
// call pop

// stack: $1 $2
// +2; 2 -> 2
// label :bad2
// prev alloc: $1 $2
// new alloc: $1 $2
.URSL_func_input_label_bad2

// stack: $1 $2
// +1; 2 -> 1
// call pop

// stack: $1
// +1; 1 -> 1
// label :bad1
// prev alloc: $1
// new alloc: $1
.URSL_func_input_label_bad1

// stack: $1
// +0; 1 -> 0
// call pop

// stack:
// +0; 0 -> 1
// const .URSL_data_bad__input

// stack: .URSL_data_bad__input
// +0; 1 -> 0
// call $print_string
// args
PSH .URSL_data_bad__input
CAL .URSL_func_print__string
ADD SP SP 1

// stack:
// +0; 0 -> ?
// halt
HLT

.URSL_func_main

// stack:
// +0; 0 -> 0
// call $select_ai
CAL .URSL_func_select__ai

// stack:
// +0; 0 -> 0
// call $print_board
CAL .URSL_func_print__board

// stack:
// +0; 0 -> 0
// label :game_loop
// prev alloc:
// new alloc:
.URSL_func_main_label_game__loop

// stack:
// +0; 0 -> 1
// call $input
CAL .URSL_func_input

// stack: $1
// +0; 1 -> 2
// call dup

// stack: $1 $1
// +2; 2 -> 3
// const .URSL_data_state

// stack: $1 $1 .URSL_data_state
// +1; 3 -> 4
// call over

// stack: $1 $1 .URSL_data_state $1
// +2; 4 -> 5
// call over

// stack: $1 $1 .URSL_data_state $1 .URSL_data_state
// +3; 5 -> 4
// call add.load
LLOD $2 $1 .URSL_data_state

// stack: $1 $1 .URSL_data_state $2
// +4; 4 -> 5
// const 32

// stack: $1 $1 .URSL_data_state $2 32
// +3; 5 -> 3
// eq branch :valid_input
// prev alloc: $1 $1 .URSL_data_state $2 32
MOV $4 $2
MOV $2 $1
IMM $3 .URSL_data_state
// new alloc: $1 $2 $3 $4 32
BRE .URSL_func_main_label_valid__input $4 32

// stack: $1 $2 $3
// +2; 3 -> 2
// call pop

// stack: $1 $2
// +1; 2 -> 1
// call pop

// stack: $1
// +0; 1 -> 0
// call pop

// stack:
// +0; 0 -> 0
// call $state_update
CAL .URSL_func_state__update

// stack:
// +0; 0 -> 1
// const .URSL_data_occupied__square

// stack: .URSL_data_occupied__square
// +0; 1 -> 0
// call $print_string
// args
PSH .URSL_data_occupied__square
CAL .URSL_func_print__string
ADD SP SP 1

// stack:
// +0; 0 -> ?
// jump :game_loop
// prev alloc:
// new alloc:
JMP .URSL_func_main_label_game__loop

// stack:
// +0; 3 -> 3
// height 3

// stack: $1 $2 $3
// +3; 3 -> 3
// label :valid_input
// prev alloc: $1 $2 $3
// new alloc: $1 $2 $3
.URSL_func_main_label_valid__input

// stack: $1 $2 $3
// +3; 3 -> 4
// const 88

// stack: $1 $2 $3 88
// +1; 4 -> 1
// call add.store
LSTR $2 $3 88

// stack: $1
// +1; 1 -> 2
// const .URSL_data_last__user__move

// stack: $1 .URSL_data_last__user__move
// +0; 2 -> 2
// call swap

// stack: .URSL_data_last__user__move $1
// +0; 2 -> 0
// call store
STR .URSL_data_last__user__move $1

// stack:
// +0; 0 -> 0
// call $state_update
CAL .URSL_func_state__update

// stack:
// +0; 0 -> 1
// const .URSL_data_selected__ai

// stack: .URSL_data_selected__ai
// +0; 1 -> 1
// call load
LOD $1 .URSL_data_selected__ai

// stack: $1
// +0; 1 -> 0
// extern "URSL" icall 0 -> 0
CAL $1

// stack:
// +0; 0 -> 0
// call $state_update
CAL .URSL_func_state__update

// stack:
// +0; 0 -> ?
// jump :game_loop
// prev alloc:
// new alloc:
JMP .URSL_func_main_label_game__loop

.URSL_func_print__board

// stack:
// +0; 0 -> 1
// const 27

// stack: 27
// +0; 1 -> 0
// out %TEXT
OUT %TEXT 27

// stack:
// +0; 0 -> 1
// const 91

// stack: 91
// +0; 1 -> 0
// out %TEXT
OUT %TEXT 91

// stack:
// +0; 0 -> 1
// const 50

// stack: 50
// +0; 1 -> 0
// out %TEXT
OUT %TEXT 50

// stack:
// +0; 0 -> 1
// const 74

// stack: 74
// +0; 1 -> 0
// out %TEXT
OUT %TEXT 74

// stack:
// +0; 0 -> 1
// const .URSL_data_top__of__board

// stack: .URSL_data_top__of__board
// +0; 1 -> 0
// call $print_string
// args
PSH .URSL_data_top__of__board
CAL .URSL_func_print__string
ADD SP SP 1

// stack:
// +0; 0 -> 1
// const 0

// stack: 0
// +1; 1 -> 2
// const 65

// stack: 0 65
// +2; 2 -> 2
// label :loop_rows
// prev alloc: 0 65
IMM $1 0
IMM $2 65
// new alloc: $1 $2
.URSL_func_print__board_label_loop__rows

// stack: $1 $2
// +1; 2 -> 3
// call dup

// stack: $1 $2 $2
// +3; 3 -> 4
// const 67

// stack: $1 $2 $2 67
// +2; 4 -> 2
// gt branch :end_loop_rows
// prev alloc: $1 $2 $2 67
// new alloc: $1 $2 $2 67
BRG .URSL_func_print__board_label_end__loop__rows $2 67

// stack: $1 $2
// +2; 2 -> 3
// const .URSL_data_one__row

// stack: $1 $2 .URSL_data_one__row
// +1; 3 -> 4
// call over

// stack: $1 $2 .URSL_data_one__row $2
// +4; 4 -> 5
// const 0

// stack: $1 $2 .URSL_data_one__row $2 0
// +3; 5 -> 5
// call swap

// stack: $1 $2 .URSL_data_one__row 0 $2
// +2; 5 -> 2
// call add.store
LSTR .URSL_data_one__row 0 $2

// stack: $1 $2
// +0; 2 -> 3
// call over

// stack: $1 $2 $1
// +3; 3 -> 4
// const .URSL_data_one__row

// stack: $1 $2 $1 .URSL_data_one__row
// +2; 4 -> 4
// call swap

// stack: $1 $2 .URSL_data_one__row $1
// +4; 4 -> 5
// const 4

// stack: $1 $2 .URSL_data_one__row $1 4
// +3; 5 -> 5
// call swap

// stack: $1 $2 .URSL_data_one__row 4 $1
// +5; 5 -> 6
// const .URSL_data_state

// stack: $1 $2 .URSL_data_one__row 4 $1 .URSL_data_state
// +4; 6 -> 6
// call swap

// stack: $1 $2 .URSL_data_one__row 4 .URSL_data_state $1
// +4; 6 -> 5
// call add.load
LLOD $3 .URSL_data_state $1

// stack: $1 $2 .URSL_data_one__row 4 $3
// +2; 5 -> 2
// call add.store
LSTR .URSL_data_one__row 4 $3

// stack: $1 $2
// +0; 2 -> 3
// call over

// stack: $1 $2 $1
// +3; 3 -> 4
// const .URSL_data_one__row

// stack: $1 $2 $1 .URSL_data_one__row
// +2; 4 -> 4
// call swap

// stack: $1 $2 .URSL_data_one__row $1
// +4; 4 -> 5
// const 8

// stack: $1 $2 .URSL_data_one__row $1 8
// +3; 5 -> 5
// call swap

// stack: $1 $2 .URSL_data_one__row 8 $1
// +5; 5 -> 6
// const .URSL_data_state

// stack: $1 $2 .URSL_data_one__row 8 $1 .URSL_data_state
// +4; 6 -> 6
// call swap

// stack: $1 $2 .URSL_data_one__row 8 .URSL_data_state $1
// +6; 6 -> 7
// const 1

// stack: $1 $2 .URSL_data_one__row 8 .URSL_data_state $1 1
// +5; 7 -> 6
// call add
ADD $3 $1 1

// stack: $1 $2 .URSL_data_one__row 8 .URSL_data_state $3
// +4; 6 -> 5
// call add.load
LLOD $4 .URSL_data_state $3

// stack: $1 $2 .URSL_data_one__row 8 $4
// +2; 5 -> 2
// call add.store
LSTR .URSL_data_one__row 8 $4

// stack: $1 $2
// +0; 2 -> 3
// call over

// stack: $1 $2 $1
// +3; 3 -> 4
// const .URSL_data_one__row

// stack: $1 $2 $1 .URSL_data_one__row
// +2; 4 -> 4
// call swap

// stack: $1 $2 .URSL_data_one__row $1
// +4; 4 -> 5
// const 12

// stack: $1 $2 .URSL_data_one__row $1 12
// +3; 5 -> 5
// call swap

// stack: $1 $2 .URSL_data_one__row 12 $1
// +5; 5 -> 6
// const .URSL_data_state

// stack: $1 $2 .URSL_data_one__row 12 $1 .URSL_data_state
// +4; 6 -> 6
// call swap

// stack: $1 $2 .URSL_data_one__row 12 .URSL_data_state $1
// +6; 6 -> 7
// const 2

// stack: $1 $2 .URSL_data_one__row 12 .URSL_data_state $1 2
// +5; 7 -> 6
// call add
ADD $3 $1 2

// stack: $1 $2 .URSL_data_one__row 12 .URSL_data_state $3
// +4; 6 -> 5
// call add.load
LLOD $4 .URSL_data_state $3

// stack: $1 $2 .URSL_data_one__row 12 $4
// +2; 5 -> 2
// call add.store
LSTR .URSL_data_one__row 12 $4

// stack: $1 $2
// +2; 2 -> 3
// const .URSL_data_one__row

// stack: $1 $2 .URSL_data_one__row
// +2; 3 -> 2
// call $print_string
PSH $1
PSH $2
// args
PSH .URSL_data_one__row
CAL .URSL_func_print__string
ADD SP SP 1
POP $2
POP $1

// stack: $1 $2
// +0; 2 -> 2
// call swap

// stack: $2 $1
// +2; 2 -> 3
// const 3

// stack: $2 $1 3
// +1; 3 -> 2
// call add
ADD $3 $1 3

// stack: $2 $3
// +0; 2 -> 2
// call swap

// stack: $3 $2
// +1; 2 -> 2
// call inc
INC $1 $2

// stack: $3 $1
// +2; 2 -> ?
// jump :loop_rows
// prev alloc: $3 $1
MOV $2 $1
MOV $1 $3
// new alloc: $1 $2
JMP .URSL_func_print__board_label_loop__rows

// stack: $1 $2
// +0; 2 -> 2
// height 2

// stack: $1 $2
// +2; 2 -> 2
// label :end_loop_rows
// prev alloc: $1 $2
// new alloc: $1 $2
.URSL_func_print__board_label_end__loop__rows

// stack: $1 $2
// +1; 2 -> 1
// call pop

// stack: $1
// +0; 1 -> 0
// call pop

// stack:
// +0; 0 -> ?
// ret
// prev alloc:
// new alloc:
RET

.URSL_func_print__string

// stack:
// +0; 0 -> 1
// get 0
LLOD $1 SP 1

// stack: $1
// +1; 1 -> 1
// label :loop
// prev alloc: $1
// new alloc: $1
.URSL_func_print__string_label_loop

// stack: $1
// +0; 1 -> 2
// call dup

// stack: $1 $1
// +1; 2 -> 2
// call load
LOD $2 $1

// stack: $1 $2
// +1; 2 -> 3
// call dup

// stack: $1 $2 $2
// +3; 3 -> 4
// const 0

// stack: $1 $2 $2 0
// +2; 4 -> 2
// eq branch :exit
// prev alloc: $1 $2 $2 0
// new alloc: $1 $2 $2 0
BRE .URSL_func_print__string_label_exit $2 0

// stack: $1 $2
// +1; 2 -> 1
// out %TEXT
OUT %TEXT $2

// stack: $1
// +0; 1 -> 1
// call inc
INC $2 $1

// stack: $2
// +1; 1 -> ?
// jump :loop
// prev alloc: $2
MOV $1 $2
// new alloc: $1
JMP .URSL_func_print__string_label_loop

// stack: $1
// +0; 2 -> 2
// height 2

// stack: $1 $2
// +2; 2 -> 2
// label :exit
// prev alloc: $1 $2
// new alloc: $1 $2
.URSL_func_print__string_label_exit

// stack: $1 $2
// +1; 2 -> 1
// call pop

// stack: $1
// +0; 1 -> 0
// call pop

// stack:
// +0; 0 -> 1
// const 10

// stack: 10
// +0; 1 -> 0
// out %TEXT
OUT %TEXT 10

// stack:
// +0; 0 -> ?
// ret
// prev alloc:
// new alloc:
RET

.URSL_func_random__ai

// stack:
// +0; 0 -> 0
// label :rng_loop
// prev alloc:
// new alloc:
.URSL_func_random__ai_label_rng__loop

// stack:
// +0; 0 -> 1
// in %RNG
IN $1 %RNG

// stack: $1
// +1; 1 -> 2
// const 9

// stack: $1 9
// +0; 2 -> 1
// call mod
MOD $2 $1 9

// stack: $2
// +1; 1 -> 2
// const .URSL_data_state

// stack: $2 .URSL_data_state
// +0; 2 -> 3
// call over

// stack: $2 .URSL_data_state $2
// +1; 3 -> 2
// call add.load
LLOD $1 .URSL_data_state $2

// stack: $2 $1
// +2; 2 -> 3
// const 32

// stack: $2 $1 32
// +1; 3 -> 1
// ne branch :bad_rng
// prev alloc: $2 $1 32
MOV $3 $1
MOV $1 $2
MOV $2 $3
// new alloc: $1 $2 32
BNE .URSL_func_random__ai_label_bad__rng $2 32

// stack: $1
// +1; 1 -> 2
// const .URSL_data_state

// stack: $1 .URSL_data_state
// +2; 2 -> 3
// const 79

// stack: $1 .URSL_data_state 79
// +0; 3 -> 0
// call add.store
LSTR $1 .URSL_data_state 79

// stack:
// +0; 0 -> ?
// ret
// prev alloc:
// new alloc:
RET

// stack:
// +0; 1 -> 1
// height 1

// stack: $1
// +1; 1 -> 1
// label :bad_rng
// prev alloc: $1
// new alloc: $1
.URSL_func_random__ai_label_bad__rng

// stack: $1
// +0; 1 -> 0
// call pop

// stack:
// +0; 0 -> ?
// jump :rng_loop
// prev alloc:
// new alloc:
JMP .URSL_func_random__ai_label_rng__loop

.URSL_func_select__ai

// stack:
// +0; 0 -> 1
// const 0

// stack: 0
// +1; 1 -> 2
// const 0

// stack: 0 0
// +2; 2 -> 2
// label :print_available
// prev alloc: 0 0
IMM $1 0
IMM $2 0
// new alloc: $1 $2
.URSL_func_select__ai_label_print__available

// stack: $1 $2
// +2; 2 -> 3
// const .URSL_data_available__ai

// stack: $1 $2 .URSL_data_available__ai
// +1; 3 -> 4
// call over

// stack: $1 $2 .URSL_data_available__ai $2
// +2; 4 -> 3
// call add.load
LLOD $3 .URSL_data_available__ai $2

// stack: $1 $2 $3
// +3; 3 -> 4
// const 0

// stack: $1 $2 $3 0
// +2; 4 -> 2
// eq branch :end_print_available
BRE .URSL_func_select__ai_label_end__print__available $3 0

// stack: $1 $2
// +1; 2 -> 2
// call inc
INC $3 $2

// stack: $1 $3
// +2; 2 -> 3
// const 91

// stack: $1 $3 91
// +2; 3 -> 2
// out %TEXT
OUT %TEXT 91

// stack: $1 $3
// +0; 2 -> 3
// call over

// stack: $1 $3 $1
// +2; 3 -> 2
// out %NUMB
OUT %NUMB $1

// stack: $1 $3
// +2; 2 -> 3
// const 93

// stack: $1 $3 93
// +2; 3 -> 2
// out %TEXT
OUT %TEXT 93

// stack: $1 $3
// +2; 2 -> 3
// const 32

// stack: $1 $3 32
// +2; 3 -> 2
// out %TEXT
OUT %TEXT 32

// stack: $1 $3
// +2; 2 -> 2
// label :print_ai_name
// prev alloc: $1 $3
MOV $2 $3
// new alloc: $1 $2
.URSL_func_select__ai_label_print__ai__name

// stack: $1 $2
// +2; 2 -> 3
// const .URSL_data_available__ai

// stack: $1 $2 .URSL_data_available__ai
// +1; 3 -> 4
// call over

// stack: $1 $2 .URSL_data_available__ai $2
// +2; 4 -> 3
// call add.load
LLOD $3 .URSL_data_available__ai $2

// stack: $1 $2 $3
// +2; 3 -> 4
// call dup

// stack: $1 $2 $3 $3
// +4; 4 -> 5
// const 0

// stack: $1 $2 $3 $3 0
// +3; 5 -> 3
// eq branch :end_print_ai_name
// prev alloc: $1 $2 $3 $3 0
// new alloc: $1 $2 $3 $3 0
BRE .URSL_func_select__ai_label_end__print__ai__name $3 0

// stack: $1 $2 $3
// +2; 3 -> 2
// out %TEXT
OUT %TEXT $3

// stack: $1 $2
// +1; 2 -> 2
// call inc
INC $3 $2

// stack: $1 $3
// +2; 2 -> ?
// jump :print_ai_name
// prev alloc: $1 $3
MOV $2 $3
// new alloc: $1 $2
JMP .URSL_func_select__ai_label_print__ai__name

// stack: $1 $2
// +0; 3 -> 3
// height 3

// stack: $1 $2 $3
// +3; 3 -> 3
// label :end_print_ai_name
// prev alloc: $1 $2 $3
// new alloc: $1 $2 $3
.URSL_func_select__ai_label_end__print__ai__name

// stack: $1 $2 $3
// +2; 3 -> 2
// call pop

// stack: $1 $2
// +2; 2 -> 3
// const 32

// stack: $1 $2 32
// +2; 3 -> 2
// out %TEXT
OUT %TEXT 32

// stack: $1 $2
// +2; 2 -> 3
// const 65

// stack: $1 $2 65
// +2; 3 -> 2
// out %TEXT
OUT %TEXT 65

// stack: $1 $2
// +2; 2 -> 3
// const 73

// stack: $1 $2 73
// +2; 3 -> 2
// out %TEXT
OUT %TEXT 73

// stack: $1 $2
// +2; 2 -> 3
// const 10

// stack: $1 $2 10
// +2; 3 -> 2
// out %TEXT
OUT %TEXT 10

// stack: $1 $2
// +0; 2 -> 2
// call swap

// stack: $2 $1
// +1; 2 -> 2
// call inc
INC $3 $1

// stack: $2 $3
// +0; 2 -> 2
// call swap

// stack: $3 $2
// +1; 2 -> 2
// call inc
INC $1 $2

// stack: $3 $1
// +2; 2 -> ?
// jump :print_available
// prev alloc: $3 $1
MOV $2 $1
MOV $1 $3
// new alloc: $1 $2
JMP .URSL_func_select__ai_label_print__available

// stack: $1 $2
// +0; 2 -> 2
// height 2

// stack: $1 $2
// +2; 2 -> 2
// label :end_print_available
// prev alloc: $1 $2
// new alloc: $1 $2
.URSL_func_select__ai_label_end__print__available

// stack: $1 $2
// +1; 2 -> 1
// call pop

// stack: $1
// +0; 1 -> 0
// call pop

// stack:
// +0; 0 -> 1
// in %NUMB
IN $1 %NUMB

// stack: $1
// +1; 1 -> 2
// in %TEXT
IN $2 %TEXT

// stack: $1 $2
// +1; 2 -> 1
// call pop

// stack: $1
// +1; 1 -> 2
// const .URSL_data_out__of__bounds

// stack: $1 .URSL_data_out__of__bounds
// +1; 2 -> 1
// call $print_string
PSH $1
// args
PSH .URSL_data_out__of__bounds
CAL .URSL_func_print__string
ADD SP SP 1
POP $1

// stack: $1
// +1; 1 -> 1
// label :input_loop
// prev alloc: $1
// new alloc: $1
.URSL_func_select__ai_label_input__loop

// stack: $1
// +1; 1 -> 2
// const 0

// stack: $1 0
// +2; 2 -> 2
// label :find_available
// prev alloc: $1 0
IMM $2 0
// new alloc: $1 $2
.URSL_func_select__ai_label_find__available

// stack: $1 $2
// +2; 2 -> 3
// const .URSL_data_available__ai

// stack: $1 $2 .URSL_data_available__ai
// +1; 3 -> 4
// call over

// stack: $1 $2 .URSL_data_available__ai $2
// +2; 4 -> 3
// call add.load
LLOD $3 .URSL_data_available__ai $2

// stack: $1 $2 $3
// +3; 3 -> 4
// const 0

// stack: $1 $2 $3 0
// +2; 4 -> 2
// eq branch :no_available
BRE .URSL_func_select__ai_label_no__available $3 0

// stack: $1 $2
// +1; 2 -> 2
// call inc
INC $3 $2

// stack: $1 $3
// +0; 2 -> 3
// call over

// stack: $1 $3 $1
// +3; 3 -> 4
// const 0

// stack: $1 $3 $1 0
// +2; 4 -> 2
// ne branch :skip_name
// prev alloc: $1 $3 $1 0
MOV $2 $3
// new alloc: $1 $2 $1 0
BNE .URSL_func_select__ai_label_skip__name $1 0

// stack: $1 $2
// +2; 2 -> 3
// const .URSL_data_available__ai

// stack: $1 $2 .URSL_data_available__ai
// +1; 3 -> 3
// call swap

// stack: $1 .URSL_data_available__ai $2
// +2; 3 -> 3
// call dec
DEC $3 $2

// stack: $1 .URSL_data_available__ai $3
// +1; 3 -> 2
// call add.load
LLOD $2 .URSL_data_available__ai $3

// stack: $1 $2
// +2; 2 -> 3
// const .URSL_data_selected__ai

// stack: $1 $2 .URSL_data_selected__ai
// +1; 3 -> 3
// call swap

// stack: $1 .URSL_data_selected__ai $2
// +1; 3 -> 1
// call store
STR .URSL_data_selected__ai $2

// stack: $1
// +0; 1 -> 0
// call pop

// stack:
// +0; 0 -> ?
// ret
// prev alloc:
// new alloc:
RET

// stack:
// +0; 2 -> 2
// height 2

// stack: $1 $2
// +2; 2 -> 2
// label :skip_name
// prev alloc: $1 $2
// new alloc: $1 $2
.URSL_func_select__ai_label_skip__name

// stack: $1 $2
// +2; 2 -> 3
// const .URSL_data_available__ai

// stack: $1 $2 .URSL_data_available__ai
// +1; 3 -> 4
// call over

// stack: $1 $2 .URSL_data_available__ai $2
// +2; 4 -> 3
// call add.load
LLOD $3 .URSL_data_available__ai $2

// stack: $1 $2 $3
// +3; 3 -> 4
// const 0

// stack: $1 $2 $3 0
// +2; 4 -> 2
// eq branch :end_skip_name
BRE .URSL_func_select__ai_label_end__skip__name $3 0

// stack: $1 $2
// +1; 2 -> 2
// call inc
INC $3 $2

// stack: $1 $3
// +2; 2 -> ?
// jump :skip_name
// prev alloc: $1 $3
MOV $2 $3
// new alloc: $1 $2
JMP .URSL_func_select__ai_label_skip__name

// stack: $1 $2
// +0; 2 -> 2
// height 2

// stack: $1 $2
// +2; 2 -> 2
// label :end_skip_name
// prev alloc: $1 $2
// new alloc: $1 $2
.URSL_func_select__ai_label_end__skip__name

// stack: $1 $2
// +0; 2 -> 2
// call swap

// stack: $2 $1
// +1; 2 -> 2
// call dec
DEC $3 $1

// stack: $2 $3
// +0; 2 -> 2
// call swap

// stack: $3 $2
// +1; 2 -> 2
// call inc
INC $1 $2

// stack: $3 $1
// +2; 2 -> ?
// jump :find_available
// prev alloc: $3 $1
MOV $2 $1
MOV $1 $3
// new alloc: $1 $2
JMP .URSL_func_select__ai_label_find__available

// stack: $1 $2
// +0; 2 -> 2
// height 2

// stack: $1 $2
// +2; 2 -> 2
// label :no_available
// prev alloc: $1 $2
// new alloc: $1 $2
.URSL_func_select__ai_label_no__available

// stack: $1 $2
// +1; 2 -> 1
// call pop

// stack: $1
// +0; 1 -> 0
// call pop

// stack:
// +0; 0 -> 1
// in %NUMB
IN $1 %NUMB

// stack: $1
// +1; 1 -> 2
// in %TEXT
IN $2 %TEXT

// stack: $1 $2
// +1; 2 -> 1
// call pop

// stack: $1
// +1; 1 -> ?
// jump :input_loop
// prev alloc: $1
// new alloc: $1
JMP .URSL_func_select__ai_label_input__loop

.URSL_func_smartish__ai

// stack:
// +0; 0 -> 1
// const 79

// stack: 79
// +0; 1 -> 1
// call $do_triple
// args
PSH 79
CAL .URSL_func_do__triple
ADD SP SP 1

// stack: $1
// +0; 1 -> 0
// bool branch :finished
BNZ .URSL_func_smartish__ai_label_finished $1

// stack:
// +0; 0 -> 1
// const 88

// stack: 88
// +0; 1 -> 1
// call $do_triple
// args
PSH 88
CAL .URSL_func_do__triple
ADD SP SP 1

// stack: $1
// +0; 1 -> 0
// bool branch :finished
BNZ .URSL_func_smartish__ai_label_finished $1

// stack:
// +0; 0 -> 0
// call $random_ai
CAL .URSL_func_random__ai

// stack:
// +0; 0 -> 0
// label :finished
// prev alloc:
// new alloc:
.URSL_func_smartish__ai_label_finished

// stack:
// +0; 0 -> ?
// ret
// prev alloc:
// new alloc:
RET

.URSL_func_state__update

// stack:
// +0; 0 -> 0
// call $print_board
CAL .URSL_func_print__board

// stack:
// +0; 0 -> 1
// const 0

// stack: 0
// +1; 1 -> 1
// label :check_win_loop
// prev alloc: 0
IMM $1 0
// new alloc: $1
.URSL_func_state__update_label_check__win__loop

// stack: $1
// +0; 1 -> 2
// call dup

// stack: $1 $1
// +2; 2 -> 3
// const 24

// stack: $1 $1 24
// +1; 3 -> 1
// gte branch :exit_check_win
// prev alloc: $1 $1 24
// new alloc: $1 $1 24
BGE .URSL_func_state__update_label_exit__check__win $1 24

// stack: $1
// +0; 1 -> 2
// call dup

// stack: $1 $1
// +2; 2 -> 3
// const .URSL_data_triples

// stack: $1 $1 .URSL_data_triples
// +1; 3 -> 2
// call add.load
LLOD $2 $1 .URSL_data_triples

// stack: $1 $2
// +2; 2 -> 3
// const .URSL_data_state

// stack: $1 $2 .URSL_data_state
// +1; 3 -> 2
// call add.load
LLOD $3 $2 .URSL_data_state

// stack: $1 $3
// +2; 2 -> 3
// const 32

// stack: $1 $3 32
// +1; 3 -> 4
// call over

// stack: $1 $3 32 $3
// +2; 4 -> 2
// eq branch :not_matching
// prev alloc: $1 $3 32 $2
MOV $2 $3
// new alloc: $1 $2 32 $2
BRE .URSL_func_state__update_label_not__matching 32 $2

// stack: $1 $2
// +0; 2 -> 3
// call over

// stack: $1 $2 $1
// +3; 3 -> 4
// const 1

// stack: $1 $2 $1 1
// +2; 4 -> 3
// call add
ADD $3 $1 1

// stack: $1 $2 $3
// +3; 3 -> 4
// const .URSL_data_triples

// stack: $1 $2 $3 .URSL_data_triples
// +2; 4 -> 3
// call add.load
LLOD $4 $3 .URSL_data_triples

// stack: $1 $2 $4
// +3; 3 -> 4
// const .URSL_data_state

// stack: $1 $2 $4 .URSL_data_state
// +2; 4 -> 3
// call add.load
LLOD $3 $4 .URSL_data_state

// stack: $1 $2 $3
// +1; 3 -> 4
// call over

// stack: $1 $2 $3 $2
// +2; 4 -> 2
// ne branch :not_matching
BNE .URSL_func_state__update_label_not__matching $3 $2

// stack: $1 $2
// +0; 2 -> 3
// call over

// stack: $1 $2 $1
// +3; 3 -> 4
// const 2

// stack: $1 $2 $1 2
// +2; 4 -> 3
// call add
ADD $3 $1 2

// stack: $1 $2 $3
// +3; 3 -> 4
// const .URSL_data_triples

// stack: $1 $2 $3 .URSL_data_triples
// +2; 4 -> 3
// call add.load
LLOD $4 $3 .URSL_data_triples

// stack: $1 $2 $4
// +3; 3 -> 4
// const .URSL_data_state

// stack: $1 $2 $4 .URSL_data_state
// +2; 4 -> 3
// call add.load
LLOD $3 $4 .URSL_data_state

// stack: $1 $2 $3
// +1; 3 -> 4
// call over

// stack: $1 $2 $3 $2
// +2; 4 -> 2
// ne branch :not_matching
BNE .URSL_func_state__update_label_not__matching $3 $2

// stack: $1 $2
// +2; 2 -> 3
// const .URSL_data_winner

// stack: $1 $2 .URSL_data_winner
// +1; 3 -> 3
// call swap

// stack: $1 .URSL_data_winner $2
// +1; 3 -> 1
// call store
STR .URSL_data_winner $2

// stack: $1
// +1; 1 -> 2
// const .URSL_data_winner

// stack: $1 .URSL_data_winner
// +1; 2 -> 1
// call $print_string
PSH $1
// args
PSH .URSL_data_winner
CAL .URSL_func_print__string
ADD SP SP 1
POP $1

// stack: $1
// +1; 1 -> ?
// halt
HLT

// stack: $1
// +0; 2 -> 2
// height 2

// stack: $1 $2
// +2; 2 -> 2
// label :not_matching
// prev alloc: $1 $2
// new alloc: $1 $2
.URSL_func_state__update_label_not__matching

// stack: $1 $2
// +1; 2 -> 1
// call pop

// stack: $1
// +1; 1 -> 2
// const 3

// stack: $1 3
// +0; 2 -> 1
// call add
ADD $2 $1 3

// stack: $2
// +1; 1 -> ?
// jump :check_win_loop
// prev alloc: $2
MOV $1 $2
// new alloc: $1
JMP .URSL_func_state__update_label_check__win__loop

// stack: $1
// +0; 1 -> 1
// height 1

// stack: $1
// +1; 1 -> 1
// label :exit_check_win
// prev alloc: $1
// new alloc: $1
.URSL_func_state__update_label_exit__check__win

// stack: $1
// +0; 1 -> 0
// call pop

// stack:
// +0; 0 -> 1
// const 0

// stack: 0
// +1; 1 -> 1
// label :check_draw_loop
// prev alloc: 0
IMM $1 0
// new alloc: $1
.URSL_func_state__update_label_check__draw__loop

// stack: $1
// +0; 1 -> 2
// call dup

// stack: $1 $1
// +2; 2 -> 3
// const 8

// stack: $1 $1 8
// +1; 3 -> 1
// gte branch :its_a_draw
// prev alloc: $1 $1 8
// new alloc: $1 $1 8
BGE .URSL_func_state__update_label_its__a__draw $1 8

// stack: $1
// +1; 1 -> 2
// const .URSL_data_state

// stack: $1 .URSL_data_state
// +0; 2 -> 3
// call over

// stack: $1 .URSL_data_state $1
// +1; 3 -> 2
// call add.load
LLOD $2 .URSL_data_state $1

// stack: $1 $2
// +2; 2 -> 3
// const 32

// stack: $1 $2 32
// +1; 3 -> 1
// eq branch :not_a_draw
BRE .URSL_func_state__update_label_not__a__draw $2 32

// stack: $1
// +0; 1 -> 1
// call inc
INC $2 $1

// stack: $2
// +1; 1 -> ?
// jump :check_draw_loop
// prev alloc: $2
MOV $1 $2
// new alloc: $1
JMP .URSL_func_state__update_label_check__draw__loop

// stack: $1
// +0; 1 -> 1
// height 1

// stack: $1
// +1; 1 -> 1
// label :its_a_draw
// prev alloc: $1
// new alloc: $1
.URSL_func_state__update_label_its__a__draw

// stack: $1
// +0; 1 -> 0
// call pop

// stack:
// +0; 0 -> 1
// const .URSL_data_draw

// stack: .URSL_data_draw
// +0; 1 -> 0
// call $print_string
// args
PSH .URSL_data_draw
CAL .URSL_func_print__string
ADD SP SP 1

// stack:
// +0; 0 -> ?
// halt
HLT

// stack:
// +0; 1 -> 1
// height 1

// stack: $1
// +1; 1 -> 1
// label :not_a_draw
// prev alloc: $1
// new alloc: $1
.URSL_func_state__update_label_not__a__draw

// stack: $1
// +0; 1 -> 0
// call pop

// stack:
// +0; 0 -> ?
// ret
// prev alloc:
// new alloc:
RET
